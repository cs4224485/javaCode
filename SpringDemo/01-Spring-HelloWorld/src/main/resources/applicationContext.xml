<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"

       xsi:schemaLocation="http://www.springframework.org/schema/beans
				http://www.springframework.org/schema/beans/spring-beans.xsd
				http://www.springframework.org/schema/aop
				http://www.springframework.org/schema/aop/spring-aop.xsd
				http://www.springframework.org/schema/context
				http://www.springframework.org/schema/context/spring-context.xsd">


    <bean class="com.harry.spring.service.HelloService" id="helloService">
        <property name="hello" value="你好"/>
    </bean>
    <!--        <bean class="com.harry.spring.service.bean.Car" id="car">-->
    <!--            <constructor-arg value="奥迪" index="0"></constructor-arg>-->
    <!--            <constructor-arg value="长春一汽" index="1"></constructor-arg>-->
    <!--            <constructor-arg value="500000" index="2"></constructor-arg>-->
    <!--        </bean>-->
    <bean class="com.harry.spring.service.bean.Car" id="car">
        <constructor-arg value="奥迪" type="java.lang.String"></constructor-arg>
        <constructor-arg value="长春一汽" type="java.lang.String"></constructor-arg>
        <constructor-arg value="50000" type="int"></constructor-arg>
    </bean>
    <bean class="com.harry.spring.service.bean.Car" id="car2">
        <constructor-arg value="BMW" type="java.lang.String"></constructor-arg>
        <constructor-arg value="北京" type="java.lang.String"></constructor-arg>
        <constructor-arg value="60000" type="int"></constructor-arg>
    </bean>
    <!--        <bean id="preson" class="com.harry.spring.service.bean.Person">-->
    <!--            <property name="name" value="harry"></property>-->
    <!--            <property name="age" value="21"></property>-->
    <!--            <property name="carList">-->
    <!--                &lt;!&ndash; 使用 list 元素来装配集合属性 &ndash;&gt;-->
    <!--                <list>-->
    <!--                    <ref bean="car"/>-->
    <!--                    <ref bean="car2"/>-->
    <!--                </list>-->
    <!--            </property>-->
    <!--        </bean>-->
    <bean id="person" class="com.harry.spring.service.bean.Person">
        <property name="name" value="harry"></property>
        <property name="age" value="21"></property>
        <property name="carMap">
            <map>
                <entry key="1" value-ref="car"></entry>
                <entry key="2" value-ref="car2"></entry>
            </map>
        </property>
    </bean>
    <bean id="person2" class="com.harry.spring.service.bean.Person" autowire="byType"/>
    <bean id="dataSource" class="com.harry.spring.service.bean.DataSource">
        <property name="properties">
            <props>
                <prop key="user">root</prop>
                <prop key="password">1234</prop>
                <prop key="jdbcUrl">jdbc:mysql://test</prop>
                <prop key="dirverClass">com.mysql.jdbc.Driver</prop>
            </props>
        </property>
    </bean>
    <bean id="personParent" abstract="true" class="com.harry.spring.service.bean.Person">
    </bean>
    <bean id="person3" parent="personParent" init-method="init" destroy-method="destroy">
        <property name="name" value="蔡爽"></property>
        <property name="age" value="24"></property>
    </bean>
    <!-- 配置 bean 后置处理器: 不需要配置 id 属性, IOC 容器会识别到他是一个 bean 后置处理器, 并调用其方法 -->
    <bean class="com.harry.spring.service.MyBeanPostProcessor"></bean>

    <!-- 通过工厂方法的方式来配置 bean -->
    <!-- 通过静态工厂方法: 一个类中有一个静态方法, 可以返回一个类的实例(了解) -->
    <!-- 在 class 中指定静态工厂方法的全类名, 在 factory-method 中指定静态工厂方法的方法名 -->
    <bean id="person4" class="com.harry.spring.service.bean.PersonBeanFactory" factory-method="getPerson">
        <constructor-arg value="蔡爽" type="java.lang.String"></constructor-arg>
        <constructor-arg value="24" type="int"></constructor-arg>
        <constructor-arg name="carMap" type="java.util.Map">
            <map>
                <entry key="1" value-ref="car"></entry>
                <entry key="2" value-ref="car2"></entry>
            </map>
        </constructor-arg>
    </bean>
    <bean id="carFactory" class="com.harry.spring.service.bean.CarBeanFactory"></bean>
    <!-- factory-bean 指向工厂 bean, factory-method 指定工厂方法(了解) -->
    <bean id="car3" factory-bean="carFactory" factory-method="getCar"></bean>

    <bean id="newCar" class="com.harry.spring.service.bean.CarFactory"></bean>

    <!-- context:exclude-filter 子节点指定排除那些指定表达式的组件 -->
    <!-- context:include-filter 子节点包含那些表达式的组件，该子节点需要配合 use-default-filters使用 -->
    <context:component-scan base-package="com.harry" use-default-filters="false">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
</beans>

