<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.harry.mybatis.Bean.Dao.EmployeeDao">
    <!--parameterType可省略-->
    <select id="selectEmployees"  resultType="com.harry.mybatis.Bean.Employee">
        SELECT * FROM tbl_employee
    </select>

    <select id="selectEmployeeById" resultType="com.harry.mybatis.Bean.Employee" databaseId="mysql">
        SELECT * FROM tbl_employee WHERE id = #{id}
    </select>

    <!-- public void addEmp(Employee employee); -->
    <!-- parameterType：参数类型，可以省略，
    获取自增主键的值：
        mysql支持自增主键，自增主键值的获取，mybatis也是利用statement.getGenreatedKeys()；
        useGeneratedKeys="true"；使用自增主键获取主键值策略
        keyProperty；指定对应的主键属性，也就是mybatis获取到主键值以后，将这个值封装给javaBean的哪个属性
    -->
    <insert id="insertEmployee"  useGeneratedKeys="true" keyProperty="id">
        INSERT INTO tbl_employee(last_name,email,gender)  values (#{lastName},#{email},#{gender})
    </insert>

<!--    int deleteEmployee(@Param("last_name") String lastName, @Param("gender") String gender);-->

    <delete id="deleteEmployee">
        DELETE FROM tbl_employee WHERE last_name=#{last_name} AND gender=#{gender}
    </delete>

<!--    int updateEmployee(@Param("last_name") String lastName, @Param("update_name") String updateName);-->
    <update id="updateEmployee">
        UPDATE tbl_employee SET last_name=#{update_name} WHERE last_name=#{last_name}
    </update>


    <!--自定义某个javaBean的封装规则
        type：自定义规则的Java类型
        id:唯一id方便引用
    -->
    <resultMap id="employeeMap" type="com.harry.mybatis.Bean.Employee">
        <!--指定主键列的封装规则
         id定义主键会底层有优化；
         column：指定哪一列
         property：指定对应的javaBean属性
        -->
        <id column="eid" property="id"/>
        <!-- 定义普通列封装规则 -->
        <result column="lastName" property="lastName"/>
        <!-- 其他不指定的列会自动封装：我们只要写resultMap就把全部的映射规则都写上。 -->
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>

    </resultMap>

    <!-- resultMap:自定义结果集映射规则；  -->
    <select id="getEmployeeById" resultMap="employeeMap">
        select id eid, last_name lastName, gender, email from tbl_employee where id=#{id}
    </select>



    <!--
        联合查询：级联属性封装结果集
      -->
    <resultMap type="com.harry.mybatis.Bean.Employee" id="MyDifEmp">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <!--  association可以指定联合的javaBean对象
            property="dept"：指定哪个属性是联合的对象
            javaType:指定这个属性对象的类型[不能省略]
            -->
        <association property="dept" javaType="com.harry.mybatis.Bean.Department">
            <id column="did" property="id"/>
            <result column="dept_name" property="departmentName"/>
        </association>
    </resultMap>
    <!--  public Employee getEmpAndDept(Integer id);-->
    <select id="getEmpAndDept" resultMap="MyDifEmp">
		SELECT e.id id,e.last_name last_name,e.gender gender,e.d_id d_id,
		d.id did,d.dept_name dept_name FROM tbl_employee e,departement d
		WHERE e.d_id=d.id AND e.id=#{id}
	</select>


    <!-- 使用association进行分步查询：
    1、先按照员工id查询员工信息
    2、根据查询员工信息中的d_id值去部门表查出部门信息
    3、部门设置到员工中；
    -->

    <!--  id  last_name  email   gender    d_id   -->
    <resultMap type="com.harry.mybatis.Bean.Employee" id="MyEmpByStep">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="email" property="email"/>
        <result column="gender" property="gender"/>
        <!-- association定义关联对象的封装规则
            select:表明当前属性是调用select指定的方法查出的结果
            column:指定将哪一列的值传给这个方法

            流程：使用select指定的方法（传入column指定的这列参数的值）查出对象，并封装给property指定的属性
         -->
        <association property="dept"
                     select="getDeptById"
                     column="d_id">
        </association>
    </resultMap>

    <!--  public Employee getEmpByIdStep(Integer id);-->
    <select id="getEmpByIdStep" resultMap="MyEmpByStep">
        select * from tbl_employee where id=#{id}
        <if test="_parameter!=null">
            and 1=1
        </if>
    </select>
</mapper>